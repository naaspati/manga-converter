import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;

apply plugin: 'java'
apply plugin: 'application'

repositories {
    jcenter()
}
dependencies {
   compile files('myutils.jar', '../DownloaderDB/build/libs/DownloaderDB.jar')
   // compile fileTree(dir: '../DownloaderDB/build/libs', include:'*.jar')
   compile 'org.json:json:20180130'
   compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.7.2'
}

version = 2.016
sourceCompatibility = JavaVersion.VERSION_1_8 
targetCompatibility = JavaVersion.VERSION_1_8

ext.appdir = file(/D:\Core Files\Emulator\dolphin\Manga\Data\Converter\bin/)
 
mainClassName = 'Main'

run {
  if(System.properties['args'])  //pass args from cmd as -Dargs="args separated by space"
    args System.properties['args'].split(' ')
    
  /*
  environment.MAX_FILE_NUMBER = 20
  environment.SKIP_DOUBLE_PAGE_CHECK = true
  environment.SKIP_NUMBER_MISSINGS_CHECK = true
  environment.SKIP_PAGE_SIZE_CHECK = true
  environment.SKIP_FISHY_CHECK = true
  environment.CHAPTERS_DATA_FILE = 'environment.txt'
  */
}
task deleteJars {
  doLast {
     file(appdir).listFiles().each({
       if(it.name.endsWith('.jar'))
         it.delete();
     });
  }
}

task install(type: Copy, dependsOn:[installDist, deleteJars]) {
  def libdir = file(new File(installDist.destinationDir, 'lib')) 
  from libdir
  into appdir
  
  doLast {
     new File(appdir, 'run.cmd').text = """
  @echo off
  setlocal
  
  ${versionText()}
  
  java %JVM_OPTS% %JAVA_OPTS% -cp \"%~dp0;%~dp0${String.join(';%~dp0', libdir.list())}\" ${mainClassName} %*
  
  """.stripIndent()
  } 
}

def versionText() {
  if(!version && version == 'unspecified') return '';
  String s = "echo version: %APP_VERSION% (${LocalDateTime.now()}^)"
  return """
  SET APP_VERSION=${version}
  if [%1]==[-v] (
    ${s}
    goto:eof
  )
  if [%1]==[--version] (
    ${s}
    goto:eof
  )
  """;    
}

defaultTasks 'install'
